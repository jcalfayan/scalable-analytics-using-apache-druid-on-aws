/* 
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/
import * as cb from 'aws-cdk-lib/aws-codebuild';
import * as events from 'aws-cdk-lib/aws-events';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as targets from 'aws-cdk-lib/aws-events-targets';

import { Construct } from 'constructs';
import { RemovalPolicy } from 'aws-cdk-lib';

interface VulnerabilityScanProps {
    druidVersion: string;
    removalPolicy: RemovalPolicy;
}

export class VulnerabilityScan extends Construct {
    public constructor(scope: Construct, id: string, props: VulnerabilityScanProps) {
        super(scope, id);

        const resultBucket = new s3.Bucket(this, 'scan-result-bucket', {
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            encryption: s3.BucketEncryption.S3_MANAGED,
            versioned: true,
            enforceSSL: true,
            removalPolicy: props.removalPolicy,
        });

        const buildProject = new cb.Project(this, 'project', {
            buildSpec: cb.BuildSpec.fromObject({
                version: '0.2',
                phases: {
                    install: {
                        // eslint-disable-next-line @typescript-eslint/naming-convention
                        'runtime-versions': {
                            java: 'corretto17',
                        },
                    },
                    build: {
                        commands: [
                            'git clone https://github.com/apache/druid.git apache-druid',
                            'cd apache-druid',
                            `git checkout tags/druid-${props.druidVersion}`,
                            'mvn dependency-check:aggregate || true',
                            `aws s3 cp ./target/dependency-check-report.html s3://${resultBucket.bucketName}/$(date +%Y-%m-%d)dependency-check-report.html`,
                        ],
                    },
                },
            }),
            environment: {
                computeType: cb.ComputeType.MEDIUM,
                buildImage: cb.LinuxBuildImage.STANDARD_7_0,
                privileged: false,
            },
        });

        resultBucket.grantWrite(buildProject);

        const schedule = new events.Rule(this, 'scan-schedule', {
            // trigger the scan at midnight
            schedule: events.Schedule.cron({
                minute: '0',
                hour: '0',
                day: '*',
                month: '*',
                year: '*',
            }),
        });

        schedule.addTarget(new targets.CodeBuildProject(buildProject));

        buildProject.addToRolePolicy(
            new iam.PolicyStatement({
                actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],
                resources: [schedule.ruleArn],
            })
        );
    }
}
